{"version":3,"sources":["logo.png","pages/cohortRepo/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PageContent","style","props","pageContainer","css","facetPanelContainer","className","width","componentProps","getTermAggProps","maxTerms","CohortRepo","Arranger","disableSocket","index","graphqlField","projectId","render","App","customHistory","createBrowserHistory","fullView","headerStyle","logoStyle","src","logo","history","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6EAAAA,EAAOC,QAAU,IAA0B,kC,6zCCe3C,IAAMC,EAAc,SAAC,GAAuC,EAArCC,MAAsC,IAA5BC,EAA2B,yBACpDC,EAAgBC,cAAH,KAMbC,EAAsBD,cAAH,KAgCzB,OACE,yBAAKE,UAAWH,GACd,yBAAKG,UAAWD,GACd,kBAAC,eAAD,eACEJ,MAAO,CAAEM,MAAO,KAChBC,eAAgB,CACdC,gBAAiB,iBAAO,CACtBC,SAAU,MAGVR,KAGR,yBACEI,UAAWF,cAAF,MAQT,kBAAC,cAAgBF,GACjB,kBAAC,QAAUA,MAqBJS,EAfI,WAIjB,OACE,kBAACC,EAAA,SAAD,CACEC,eAAa,EACbC,MANU,iBAOVC,aANiB,SAOjBC,UANc,SAOdC,OAAQjB,K,ywBCrCCkB,MAjDf,WACE,IAAMC,EAAgBC,cAChBC,EAAWjB,cAAH,KAMRkB,EAAclB,cAAH,KAeXmB,EAAYnB,cAAH,KAGTD,EAAgBC,cAAH,KAInB,OACE,yBAAKE,UAAWe,GACd,yBAAKf,UAAWgB,GACd,yBAAKE,IAAKC,IAAMnB,UAAWiB,IAD7B,8CAIA,yBAAKjB,UAAWH,GACd,kBAAC,IAAD,CAAQuB,QAASP,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,YCnCMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ac58e40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.745d7aaf.png\";","import React from \"react\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { css } from \"emotion\";\n\nimport {\n  Arranger,\n  GetProjects,\n  Aggregations,\n  CurrentSQON,\n  Table\n  // @ts-ignore\n} from \"@arranger/components/dist/Arranger\";\nimport \"@arranger/components/public/themeStyles/beagle/beagle.css\";\n\nconst PageContent = ({ style, ...props }: { style: {} }) => {\n  const pageContainer = css`\n    display: flex;\n    flex-direction: row;\n    max-height: 100%;\n    height: 100%;\n  `;\n  const facetPanelContainer = css`\n    max-height: calc(100vh - 64px);\n    border-right: solid 1px #dcdde1;\n    overflow: scroll;\n    .aggregation-card {\n      border-top: none;\n      .header {\n        margin: 0px;\n        .title-wrapper {\n          padding: 10px;\n          padding: 10px;\n          background-color: #e8e8f0;\n          &.collapsed {\n            padding-bottom: 10px;\n            & > .arrow {\n              padding: 0px;\n            }\n          }\n        }\n      }\n      border-left: none;\n      padding: 0px;\n      margin: 0px;\n      .filter {\n        padding-left: 5px;\n        padding-right: 5px;\n      }\n      .bucket {\n        padding: 3px 5px 5px 5px;\n      }\n    }\n  `;\n  return (\n    <div className={pageContainer}>\n      <div className={facetPanelContainer}>\n        <Aggregations\n          style={{ width: 300 }}\n          componentProps={{\n            getTermAggProps: () => ({\n              maxTerms: 3\n            })\n          }}\n          {...props}\n        />\n      </div>\n      <div\n        className={css`\n          position: relative;\n          flex-grow: 1;\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n        `}\n      >\n        <CurrentSQON {...props} />\n        <Table {...props} />\n      </div>\n    </div>\n  );\n};\n\nconst CohortRepo = () => {\n  const index = \"cohort_centric\";\n  const graphqlField = \"cohort\";\n  const projectId = \"demo_3\";\n  return (\n    <Arranger\n      disableSocket\n      index={index}\n      graphqlField={graphqlField}\n      projectId={projectId}\n      render={PageContent}\n    />\n  );\n};\n\nexport default CohortRepo;\n","import React from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport CohortRepo from \"./pages/cohortRepo\";\nimport logo from \"./logo.png\";\nimport { css } from \"emotion\";\n\nfunction App() {\n  const customHistory = createBrowserHistory();\n  const fullView = css`\n    height: 100%;\n    max-height: 100%;\n    display: flex;\n    flex-direction: column;\n  `;\n  const headerStyle = css`\n    height: 64px;\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n    font-weight: bold;\n    font-stretch: normal;\n    font-style: normal;\n    line-height: 1.04;\n    letter-spacing: normal;\n    color: #191970;\n    background: white;\n    border-bottom: solid 2px #dcdde1;\n    width: 100%;\n  `;\n  const logoStyle = css`\n    width: 142px;\n  `;\n  const pageContainer = css`\n    position: relative;\n    flex: 1;\n  `;\n  return (\n    <div className={fullView}>\n      <div className={headerStyle}>\n        <img src={logo} className={logoStyle}></img>\n        International HundredK+ Cohorts Consortium\n      </div>\n      <div className={pageContainer}>\n        <Router history={customHistory}>\n          <Switch>\n            <Route exact path=\"/\">\n              <CohortRepo />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}